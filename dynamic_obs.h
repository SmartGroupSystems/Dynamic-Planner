// Generated by gencpp from file map_generator/dynamic_obs.msg
// DO NOT EDIT!


#ifndef MAP_GENERATOR_MESSAGE_DYNAMIC_OBS_H
#define MAP_GENERATOR_MESSAGE_DYNAMIC_OBS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace map_generator
{
template <class ContainerAllocator>
struct dynamic_obs_
{
  typedef dynamic_obs_<ContainerAllocator> Type;

  dynamic_obs_()
    : header()
    , obs_num(0)
    , position()
    , velocity()
    , radius()  {
    }
  dynamic_obs_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , obs_num(0)
    , position(_alloc)
    , velocity(_alloc)
    , radius(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _obs_num_type;
  _obs_num_type obs_num;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _position_type;
  _position_type position;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _velocity_type;
  _velocity_type velocity;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _radius_type;
  _radius_type radius;





  typedef boost::shared_ptr< ::map_generator::dynamic_obs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::map_generator::dynamic_obs_<ContainerAllocator> const> ConstPtr;

}; // struct dynamic_obs_

typedef ::map_generator::dynamic_obs_<std::allocator<void> > dynamic_obs;

typedef boost::shared_ptr< ::map_generator::dynamic_obs > dynamic_obsPtr;
typedef boost::shared_ptr< ::map_generator::dynamic_obs const> dynamic_obsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::map_generator::dynamic_obs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::map_generator::dynamic_obs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::map_generator::dynamic_obs_<ContainerAllocator1> & lhs, const ::map_generator::dynamic_obs_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.obs_num == rhs.obs_num &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.radius == rhs.radius;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::map_generator::dynamic_obs_<ContainerAllocator1> & lhs, const ::map_generator::dynamic_obs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace map_generator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::map_generator::dynamic_obs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::map_generator::dynamic_obs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::map_generator::dynamic_obs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::map_generator::dynamic_obs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::map_generator::dynamic_obs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::map_generator::dynamic_obs_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::map_generator::dynamic_obs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94fc346f5b6bcbb0ecef053b50d1c52a";
  }

  static const char* value(const ::map_generator::dynamic_obs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94fc346f5b6bcbb0ULL;
  static const uint64_t static_value2 = 0xecef053b50d1c52aULL;
};

template<class ContainerAllocator>
struct DataType< ::map_generator::dynamic_obs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "map_generator/dynamic_obs";
  }

  static const char* value(const ::map_generator::dynamic_obs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::map_generator::dynamic_obs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"uint16 obs_num\n"
"geometry_msgs/Vector3[]  position\n"
"geometry_msgs/Vector3[]  velocity\n"
"float64[] radius\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::map_generator::dynamic_obs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::map_generator::dynamic_obs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.obs_num);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.radius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct dynamic_obs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::map_generator::dynamic_obs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_generator::dynamic_obs_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "obs_num: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.obs_num);
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.position[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.velocity[i]);
    }
    s << indent << "radius[]" << std::endl;
    for (size_t i = 0; i < v.radius.size(); ++i)
    {
      s << indent << "  radius[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.radius[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAP_GENERATOR_MESSAGE_DYNAMIC_OBS_H
